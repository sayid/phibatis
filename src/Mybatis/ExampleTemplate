<?php
namespace  #{EntityMameSpace};

use Sayid\Table2Model\DBTool;
use Illuminate\Database\Query\Builder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Collection;
use #{EntityMameSpace}\#{EntityName} as Entity;

class #{EntityName}Example
{
    private string $prikey = "#{PriKey}";

    private static string $tableName = "#{TableName}";

    private Builder $builder;

    public function __construct()
    {
        $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
    }

    public static function getTable()
    {
        return self::$tableName;
    }

    public function getBuilder() : Builder
    {
        return $this->builder;
    }

    public function getOne() : ?Entity
    {
        return $this->builder->first();
    }

    public function getOneFields(array $fields) : ?object
    {
         return $this->builder->first($fields);
    }

    public function getListFields(array $fields) : ?Collection
    {
       return $this->builder->get($fields);
    }

    /**
    * 获取列表结果
    */
    public function getList() : ?Collection
    {
       return $this->builder->get();
    }

    public function count()
    {
        return $this->builder->count();
    }

    public function delete()
    {
        return $this->builder->delete();
    }

    public function update(array $data)
    {
        return $this->builder->delete();
    }

    public function orderBy(string $field, string $type)
    {
        $this->builder->orderby($field, $type);
        return $this;
    }
    public function forPage(int $page, int $limit)
    {
        $this->builder->forPage($page, $limit);
        return $this;
    }

    public function insert(array $data)
    {
        DB::table(self::getTable())->insertGetId($data);
    }

    public function inserts(array $data)
    {
        DB::table(self::getTable())->insert($data);
    }

    public function orWhere(\Closure $closure)
    {
        $this->builder->orWhere($closure);
        return $this;
    }
    public function leftJoin(string $table, string $field, string $sign, string $field1)
    {
        $this->builder->leftJoin($table, $field, $sign, $field1);
        return $this;
    }
    public function rightJoin(string $table, string $field, string $sign, string $field1)
    {
        $this->builder->rightJoin($table, $field, $sign, $field1);
        return $this;
    }

    #{Where}

}
