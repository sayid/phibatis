<?php
namespace  #{EntityMameSpace};

use Sayid\Phibatis\DBTool;
#{ExampleDriver}
use #{EntityMameSpace}\#{EntityName} as Entity;

class #{EntityName}Example
{
    private string $prikey = "#{PriKey}";

    private static string $tableName = "#{TableName}";

    private Builder $builder;

    public function __construct()
    {
        $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
    }

    public static function getTable() : string
    {
        return self::$tableName;
    }

    public function getBuilder() : Builder
    {
        return $this->builder;
    }

    public function getOne() : ?Entity
    {
        $data = $this->builder->first();
        $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
        return $data;
    }

    public function getOneFields(array $fields) : ?object
    {
         $data = $this->builder->first($fields);
         $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
         return $data;
    }

    public function getListFields(array $fields) : ?Collection
    {
       $data = $this->builder->get($fields);
       $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
       return $data;
    }

    /**
    * 获取列表结果
    */
    public function getList() : ?Collection
    {
       $data = $this->builder->get();
       $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
       return $data;
    }

    public function count()
    {
        $data = $this->builder->count();
        $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
        return $data;
    }

    public function delete()
    {
        $data = $this->builder->delete();
        $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
        return $data;
    }

    public function deleteByPri(int $id)
    {
        $this->builder->where($this->prikey, "=", $id);
        $data = $this->builder->delete();
        $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
        return $data;
    }

    public function update(array $data)
    {
        $data = $this->builder->update($data);
        $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
        return $data;
    }

    public function updateByPri(int $id, array $data)
    {
        $this->builder->where($this->prikey, "=", $id);
        $data = $this->builder->update($data);
        $this->builder = DBTool::getBuilder($this::getTable(), Entity::class);
        return $data;
    }

    public function distinct()
    {
        $this->builder->distinct();
        return $this;
    }
    /**
     * Add a "group by" clause to the query.
     *
     * @param  array|string  ...$groups
     * @return $this
     */
    public function groupBy(...$groups)
    {
        $this->builder->groupBy($groups);
        return $this;
    }

    public function orderBy(string $field, string $type)
    {
        $this->builder->orderBy($field, $type);
        return $this;
    }
    public function forPage(int $page, int $limit)
    {
        $this->builder->forPage($page, $limit);
        return $this;
    }

    public function insert(array $data)
    {
        return DB::table(self::getTable())->insertGetId($data);
    }

    public function inserts(array $data)
    {
        return DB::table(self::getTable())->insert($data);
    }

    public function orWhere(\Closure $closure)
    {
        $this->builder->orWhere($closure);
        return $this;
    }
    public function leftJoin(string $table, string $field, string $sign, string $field1)
    {
        $this->builder->leftJoin($table, $field, $sign, $field1);
        return $this;
    }
    public function rightJoin(string $table, string $field, string $sign, string $field1)
    {
        $this->builder->rightJoin($table, $field, $sign, $field1);
        return $this;
    }

    #{Where}

}
